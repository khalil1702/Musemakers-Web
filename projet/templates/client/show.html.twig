{% extends 'nav_foot_client.html.twig' %}

{% block title %}Exposition{% endblock %}

{% block content %}
    <div class="wrapper">
        <div class="product-img">
            {% if exposition.image %}
                <img src="{{ path('user_images', {'imageName': exposition.image}) }}" height="420" width="327" alt="{{ exposition.nom }}">
            {% else %}
                <!-- Afficher une image par défaut ou un message d'erreur ici -->
            {% endif %}
        </div>
        <div class="product-info">
            <div class="product-text">
                <h1>{{ exposition.nom }}</h1>
                
                <h2>Theme {{ exposition.theme }}</h2>
                <p>{{ exposition.description }} <br> Date Debut : {{ exposition.dateDebut|date('d-m-Y') }} 
                    <br> Date fin : {{ exposition.dateFin|date('d-m-Y') }}  <br>
                     De {{ exposition.heureDebut|date('H:i') }} à  {{ exposition.heureFin|date('H:i') }} </p>
 
                    
            </div>
            <div class="star-rating-wrapper" style="display: flex; align-items: center; justify-content: center; margin-top: 20px;">
                <div class="star-rating">
                    {% for i in 1..5 %}
                        <span class="star" data-value="{{ i }}" data-exposition-id="{{ exposition.idExposition }}">
                            {% if rating >= i %}
                                ★
                            {% else %}
                                ☆
                            {% endif %}
                        </span>
                    {% endfor %}
                   
                </div> </div>
                <div class="product-price-btn">
               
                    <button type="button" id="reserveButton">Je Réserve</button>
                    
                </div>
                
           
            
            
        </div>
        
    </div>

    <!-- Reservation Modal -->
    <div class="modal fade" id="reservationModal" tabindex="-1" role="dialog" aria-labelledby="reservationModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="reservationModalLabel">Reserve Tickets</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="reservationForm" action="{{ path('app_client_reserve', {'idExposition': exposition.idExposition}) }}" method="post">
                        <div class="form-group">
                            <label for="ticketNumber">Number of Tickets:</label>
                            <input type="number" class="form-control" id="ticketNumber" name="ticketsNumber">
                            <label id="ticketsError" style="color: red;"></label>
                        </div>
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        window.onload = function() {
            document.getElementById('reserveButton').addEventListener('click', function() {
                {% if reservationExists %}
                    // Afficher une alerte si la réservation existe déjà
                    alert("Vous avez déjà réservé cette exposition.");
                {% else %}
                    // Ouvrir le modal de réservation
                    $('#reservationModal').modal('show');
                {% endif %}
            });

            // Gérer la soumission du formulaire de réservation
            document.getElementById('reservationForm').addEventListener('submit', function(event) {
                var ticketsNumber = document.getElementById('ticketNumber').value;
                var ticketsInput = document.getElementById('ticketNumber');
                var errorLabel = document.getElementById('ticketsError');

                // Vérifier si le nombre de tickets est négatif, vide ou supérieur à 200
                if (ticketsNumber <= 0 || ticketsNumber === '') {
                    alert("Le nombre de tickets doit être supérieur à zéro.");
                    errorLabel.textContent = "Le nombre de tickets doit être supérieur à zéro.";
                    errorLabel.style.color = 'red';
                    ticketsInput.style.borderColor = 'red';
                    event.preventDefault(); // Empêcher la soumission du formulaire
                    return;
                } else if (ticketsNumber > 200) {
                    alert("Nombre trop grand ! Veuillez saisir un nombre inférieur ou égal à 200.");
                    errorLabel.textContent = "Nombre trop grand ! Veuillez saisir un nombre inférieur ou égal à 200.";
                    errorLabel.style.color = 'red';
                    ticketsInput.style.borderColor = 'red';
                    event.preventDefault(); // Empêcher la soumission du formulaire
                    return;
                } else {
                    // Réinitialiser le label et le style du champ
                    errorLabel.textContent = '';
                    errorLabel.style.color = ''; // Réinitialiser la couleur du texte
                    ticketsInput.style.borderColor = ''; // Réinitialiser la couleur de la bordure

                    alert("Réservation avec succès !"); // Vous pouvez personnaliser ce message selon vos besoins

                }
            });
        }


        document.querySelectorAll('.star').forEach(star => {
            star.addEventListener('click', setRating);
            star.addEventListener('mouseover', starOver);
            star.addEventListener('mouseout', starOut);
        });
    
        function setRating(ev) {
            let rating = ev.currentTarget.getAttribute('data-value');
            let expositionId = ev.currentTarget.getAttribute('data-exposition-id');
            let stars = document.querySelectorAll(`.star[data-exposition-id="${expositionId}"]`);
            
            stars.forEach(star => {
                star.innerHTML = (star.getAttribute('data-value') <= rating) ? '★' : '☆';
            });
            
            // Store the rating in the session storage with a unique key for each user and exposition
            sessionStorage.setItem(`ratingUser_${expositionId}`, rating);
            
            // Send the rating to the server using AJAX
            sendRatingToServer(expositionId, rating);
        }
    
        function starOver(ev) {
            let currentStar = ev.currentTarget.getAttribute('data-value');
            let expositionId = ev.currentTarget.getAttribute('data-exposition-id');
            let stars = document.querySelectorAll(`.star[data-exposition-id="${expositionId}"]`);
            
            stars.forEach(star => {
                star.innerHTML = (star.getAttribute('data-value') <= currentStar) ? '★' : '☆';
            });
        }
    
        function starOut() {
            let expositionId = this.getAttribute('data-exposition-id');
            let rating = sessionStorage.getItem(`ratingUser_${expositionId}`) || 0;
            let stars = document.querySelectorAll(`.star[data-exposition-id="${expositionId}"]`);
            
            stars.forEach(star => {
                star.innerHTML = (star.getAttribute('data-value') <= rating) ? '★' : '☆';
            });
        }
    
        function sendRatingToServer(expositionId, rating) {
            // Send the rating data to the server using AJAX
            fetch(`/client/save-rating`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                    expositionId: expositionId,
                    rating: rating
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // Handle success response from the server if needed
                console.log('Rating saved successfully:', data);
            })
            .catch(error => {
                // Handle errors here
                console.error('Error saving rating:', error);
            });
        }
        
    </script>
    
{% endblock %}
